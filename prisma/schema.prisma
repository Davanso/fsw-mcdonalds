// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// The Restaurant model represents a restaurant entity
model Reustaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String
  description    String
  avatarImageUrl String
  coverImageUrl  String
  menuCategories MenuCategory[] // One-to-many relation with MenuCategory
  products       Product[] // One-to-many relation with Product
  orders         Order[] // One-to-many relation with Order
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// The MenuCategory model represents a category of the menu in a restaurant
model MenuCategory {
  id           String      @id @default(uuid())
  name         String
  restaurant   Reustaurant @relation(fields: [restaurantId], references: [id]) // Many-to-one relation with Restaurant
  restaurantId String
  products     Product[] // One-to-many relation with Product
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// The Product model represents a product in a restaurant's menu
model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  orderProducts  OrderProduct[] // One-to-many relation with OrderProduct
  restaurant     Reustaurant    @relation(fields: [restaurantId], references: [id]) // Many-to-one relation with Restaurant
  restaurantId   String
  menuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id]) // Many-to-one relation with MenuCategory
  menuCategoryId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// The Order model represents a customer's order in a restaurant
model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  consumptionMethod ConsumptionMethod
  restaurant        Reustaurant       @relation(fields: [restaurantId], references: [id]) // Many-to-one relation with Restaurant
  restaurantId      String
  orderProducts     OrderProduct[] // One-to-many relation with OrderProduct
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

// The OrderProduct model represents a product in a customer's order
model OrderProduct {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id]) // Many-to-one relation with Product
  productId String
  order     Order    @relation(fields: [orderId], references: [id]) // Many-to-one relation with Order
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PREPARATION
  DELIVERED
  CANCELLED
}

enum ConsumptionMethod {
  TAKE_AWAY
  DINE_IN
}
